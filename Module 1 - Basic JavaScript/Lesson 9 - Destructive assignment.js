/*
Деструктурирующее присваивание — это удобный способ извлечь значения из массивов или свойств объектов и присвоить их
переменным в одной операции. Этот подход существенно сокращает код и делает его более читабельным.
*/

/*
Деструктурирование массивов:

Один из основных способов использования деструктурирующего присваивания - это извлечение значений из массивов.
*/

// Обычное присваивание
let numbers = [1, 2, 3, 4, 5];
let a = numbers[0];
let b = numbers[1];
let c = numbers[2];

console.log(a, b, c); // Вывод: 1 2 3

// Деструктурирующее присваивание
let [x, y, z] = numbers;

console.log(x, y, z); // Вывод: 1 2 3

/*
В примере выше мы создаем массив numbers, а затем извлекаем его значения с помощью
деструктурирующего присваивания в переменные x, y и z. Значения извлекаются по порядку,
и мы можем использовать квадратные скобки [ ], чтобы указать, что мы работаем с массивом.
*/


// ================================================================================= //


/*
Деструктурирование объектов

Деструктурирующее присваивание также может быть использовано для извлечения значений из объектов.
*/

// Обычное присваивание
let person = {
  name: 'John',
  age: 25,
  city: 'New York'
};

let name = person.name;
let age = person.age;
let city = person.city;

console.log(name, age, city); // Вывод: John 25 New York

// Деструктурирующее присваивание
let { name, age, city } = person;

console.log(name, age, city); // Вывод: John 25 New York

/*
В этом примере у нас есть объект person, содержащий свойства name, age и city.
Мы используем деструктурирующее присваивание с фигурными скобками { }, чтобы извлечь значения свойств и присвоить
их переменным name, age и city.
*/



// ================================================================================= //



/*
Пропуск ненужных значений:

В некоторых случаях у нас могут быть объекты или массивы с большим количеством значений, но нам нужны только
некоторые из них. В таких ситуациях мы можем пропустить ненужные значения.
*/

let numbers = [1, 2, 3, 4, 5];
let [x, , z] = numbers;

console.log(x, z); // Вывод: 1 3

/*
В этом примере мы используем запятые, в деструктурирующем присваивании для пропуска значения второго
элемента массива numbers.
*/




// ================================================================================= //




/*
Значения по умолчанию:

Мы также можем установить значения по умолчанию для переменных при деструктурирующем присваивании.
*/

let person = {
  name: 'John',
  age: 25
};

let { name, profession = 'Unknown' } = person;

console.log(name, profession); // Вывод: John Unknown

/*
В этом примере мы устанавливаем значение по умолчанию Unknown для переменной profession,
так как у объекта person нет свойства profession.
*/


/*
В случае деструктуризации объектов с одинаковым содержимым, необходимо задать разные названия для
параметров которые мы вытаскиваем
*/

const obj1 = {
  name: "John",
  age: 18
}

const obj2 = {
  name: "Naomi",
  age: 19
}

let { name: obj1Name, age: obj1Age } = obj1;
let { name: obj2Name, age: obj2Age } = obj2;

console.log(obj1Name, obj1Age);
console.log(obj2Name, obj2Age);





// ================================================================================= //
//                 Вопросы
// ================================================================================= //

/*
1. Что такое деструктурирующее присваивание в JavaScript?
2. В каких случаях мы можем использовать деструктурирующее присваивание?
3. Как извлечь значения из массива с помощью деструктурирующего присваивания?
4. Как извлечь значения из объекта с помощью деструктурирующего присваивания?
5. Как пропустить ненужные значения при деструктурирующем присваивании?
6. Как установить значения по умолчанию при деструктурирующем присваивании?
7. Можно ли вложить деструктурирующее присваивание? Если да, то как?
8. Можно ли использовать деструктурирующее присваивание в параметрах функций?
9. Какие преимущества дает использование деструктурирующего присваивания?
10. Какие дополнительные возможности или особенности деструктурирующего присваивания вы знаете?
*/






// ================================================================================= //
//                 Задачи
// ================================================================================= //


/*
1. Напишите код, используя деструктурирующее присваивание, чтобы извлечь значения "apple", "banana" и "cherry"
из массива fruits и присвоить их переменным a, b и c соответственно:

let fruits = ["apple", "banana", "cherry"];
// Используйте деструктурирующее присваивание


2. У вас есть объект student с информацией о студенте. Используя деструктурирующее присваивание,
извлеките значения свойств name и age и присвойте их переменным studentName и studentAge:

let student = {
  name: "John",
  age: 20,
  major: "Computer Science"
};
// Используйте деструктурирующее присваивание



3. Напишите функцию getRectangleInfo(), которая принимает объект rectangle со свойствами width и height.
Используя деструктурирующее присваивание, извлеките значения свойств и верните объект со свойствами width,
height и area, где area равна произведению width и height.


4. У вас есть массив data с информацией о студентах. Каждый элемент массива - это объект с свойствами name и age.
Используя деструктурирующее присваивание, создайте новый массив names, содержащий только имена студентов.


5. У вас есть объект person с информацией о человеке. Используя деструктурирующее присваивание,
создайте переменные firstName и lastName, которые будут содержать значения свойств first и last
соответственно. Если свойства first или last отсутствуют, установите значения по умолчанию как пустые строки.
*/






















